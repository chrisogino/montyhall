% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/monty-hall-pkg.R, R/monty-hall-pkg_Lab02.R
\name{determine_winner}
\alias{determine_winner}
\title{Checks final door chosen and determines whether it is a winner, i.e.
car is behind door.}
\usage{
determine_winner(final.pick, game)

determine_winner(final.pick, game)
}
\arguments{
\item{final.pick}{Final door picked by change_door_5_doors}

\item{game}{Vector containing the doors and what's behind them.}
}
\value{
The function returns "WIN" or "LOSE"

The function returns "WIN" or "LOSE"
}
\description{
\code{determine_winner()} determines whether a car is behind the door
chosen in change_door function.

\code{determine_winner()} determines whether a car is behind the door
chosen in change_door function.
}
\details{
The game setup replicates the game on the TV show "Let's
Make a Deal" where there are three doors for a contestant
to choose from, one of which has a car behind it and two
have goats. The contestant selects a door, then the host
opens a door to reveal a goat, and then the contestant is
given an opportunity to stay with their original selection
or switch to the other unopened door. There was a famous
debate about whether it was optimal to stay or switch when
given the option to switch, so this simulation was created
to test both strategies.

The game setup replicates the game on the TV show "Let's
Make a Deal" where there are five doors for a contestant
to choose from, one of which has a car behind it and four
have goats. The contestant selects a door, then the host
opens a door to reveal a goat, and then the contestant is
given an opportunity to stay with their original selection
or switch to the other unopened doors. There was a famous
debate about whether it was optimal to stay or switch when
given the option to switch, so this simulation was created
to test both strategies.
}
\examples{
  new.game <- create_game()
  a.pick <- select_door()
  opened.door <- open_goat_door(new.game,a.pick)
  final.pick <- change_door(stay=T,opened.door,a.pick)
  determine_winner(final.pick,new.game)
  new.game <- create_game_5_doors()
  a.pick <- select_door_5_doors()
  opened.door <- open_goat_door_5_doors(new.game,a.pick)
  final.pick <- change_door_5_doors(stay=T,opened.door,a.pick)
  determine_winner(final.pick,new.game)
}
